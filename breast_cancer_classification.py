# -*- coding: utf-8 -*-
"""göğüs_kanseri.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SQkKGKuWlXGLqyPm3AOEy76aY3mU6_rH
"""

import matplotlib.pyplot as plt 
import pandas as pd 
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense 
from tensorflow.keras.layers import LSTM 
from tensorflow.keras.layers import Dropout 
from tensorflow.keras.layers import *
from tensorflow.keras.callbacks import EarlyStopping 
from sklearn.decomposition import PCA
from matplotlib.colors import ListedColormap
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.neighbors import KNeighborsClassifier ,NeighborhoodComponentsAnalysis,LocalOutlierFactor
from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.preprocessing import MinMaxScaler,StandardScaler 
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import mean_squared_error
from matplotlib.colors import ListedColormap

import matplotlib.dates as mdates
import matplotlib.pyplot as plt 
import datetime as dt

import warnings

warnings.filterwarnings("ignore")

data = pd.read_csv("/data.csv")

data.head()

data.drop(['Unnamed: 32','id'],inplace = True,axis = 1)

data.head()

import seaborn as sns

data = data.rename(columns = {"diagnosis":"target"})

sns.countplot(data["target"])

data["target"] = [1 if i.strip() == "M" else 0 for i in data.target]

data.head()

len(data)

corr_matrix = data.corr()

threshold = 0.75

filtre = np.abs(corr_matrix["target"])> threshold

corr_features = corr_matrix.columns[filtre].tolist()

sns.clustermap(data[corr_features].corr(),annot = True,fmt = ".2f")

y = data.target
x = data.drop(["target"],axis = 1)

columns = x.columns.tolist()

clf = LocalOutlierFactor()
y_pred = clf.fit_predict(x)

X_score = clf.negative_outlier_factor_

outlier_score = pd.DataFrame()
outlier_score["score"] = X_score

threshold = -2.5

filtre = outlier_score["score"]<threshold

outlier_index = outlier_score[filtre].values.tolist()

radius = (X_score.max()-X_score)/(X_score.max() - X_score.min())

outlier_score["radius"] = radius

x = x.drop(outlier_index)
y = y.drop(outlier_index).values

x

y

test_size = 0.3

X_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size =test_size,random_state =42 )

#standartscaler

scaler = StandardScaler()
x_train = scaler.fit_transform(X_train)
x_test = scaler.transform(X_test)

from sklearn import neighbors
knn= KNeighborsClassifier(n_neighbors=2)

knn.fit(X_train,Y_train)

y_pred = knn.predict(X_test)

cm = confusion_matrix(Y_test,y_pred)

acc = accuracy_score(Y_test,y_pred)

score = knn.score(X_test,Y_test)

print(cm,acc,score)









